/**
 * PLEASE DO NOT EDIT THIS FILE (automatically generated from ./schema/props.json)
 */
import {
    Prop,
    Virtual
} from "vue-typed"
import * as Vue from "vue"

export abstract class _ModalBase extends Virtual < Vue > () {

    /**
     * Attach show event to another element
     * 
     * @param {HTMLElement | JQuery | string} selector Element identifier
     * @type {string}
     */
    @Prop({
        type: String
    })
    attachShow: string

    /**
     * Attach hide event to another element
     * 
     * @param {HTMLElement | JQuery | string} selector Element identifier
     * @type {string}
     */
    @Prop({
        type: String
    })
    attachHide: string

    /**
     * Attach toggle event to another element
     * 
     * @param {HTMLElement | JQuery | string} selector Element identifier
     * @type {string}
     */
    @Prop({
        type: String
    })
    attachToggle: string

    /**
     * Attach refresh event to another element
     * 
     * @param {HTMLElement | JQuery | string} selector Element identifier
     * @type {string}
     */
    @Prop({
        type: String
    })
    attachRefresh: string

    /**
     * Setting to false will not allow you to close the modal by clicking on the dimmer.
     * 
     * @type {boolean}
     */
    @Prop({
        type: Boolean
    })
    closable: boolean

    /**
     * Named transition to use when animating menu in and out, full list can be found in ui transitions docs.
     * 
     * @type {SemanticUI.AnimationNames}
     */
    @Prop()
    transition: SemanticUI.AnimationNames

    /**
     * Allow second modal to be opened on top of the first modal.
     * 
     * @default false
     * @type {boolean}
     */
    @Prop({
        type: Boolean
    })
    allowMultiple: boolean = false

    /**
     * First input in modal will receive focus when shown.
     * 
     * @default false
     * @type {boolean}
     */
    @Prop({
        type: Boolean
    })
    autofocus: boolean = false

    /**
     * Header icon.
     * 
     * @type {string}
     */
    @Prop({
        type: String
    })
    icon: string

}